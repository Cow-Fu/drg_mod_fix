jobs:
  release:
    name: Release - ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: drg_mod_fix
            name: drg_mod_fix-FreeBSD-x86_64.tar.gz
            command: build

          - release_for: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: drg_mod_fix.exe
            name: drg_mod_fix-Windows-x86_64.zip
            command: both

          - release_for: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: drg_mod_fix
            name: drg_mod_fix-Darwin-x86_64.tar.gz
            command: both

            # more release targets here ...

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0.0.9
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--release"
          strip: true
# name: Build
# on: [push]
# env:
#   # The project name specified in your Cargo.toml
#   PROJECT_NAME: drg_mod_fix
# jobs:
#   build:
#     # Set the job to run on the platform specified by the matrix below
#     runs-on: ${{ matrix.runner }}
#  
#     # Define the build matrix for cross-compilation
#     strategy:
#       matrix:
#         include:
#           - name: linux-amd64
#             runner: ubuntu-latest
#             target: x86_64-unknown-linux-gnu
#           - name: win-amd64
#             runner: windows-latest
#             target: x86_64-pc-windows-msvc
#           - name: macos-amd64
#             runner: macos-latest
#             target: x86_64-apple-darwin
#           - name: macos-arm64
#             runner: macos-latest
#             target: aarch64-apple-darwin
#  
#     # The steps to run for each matrix item
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#  
#       - name: Install Rust
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           targets: "${{ matrix.target }}"
#  
#       - name: Setup Cache
#         uses: Swatinem/rust-cache@v2
#  
#       - name: Build Binary
#         run: cargo build --verbose --release --target ${{ matrix.target }}
#  
#       - name: Release Binary
#         shell: bash
#         run: |
#           BIN_SUFFIX=""
#           if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
#             BIN_SUFFIX=".exe"
#           fi
#  
#           # The built binary output location
#           BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
#  
#           # Define a better name for the final binary
#           BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
#           BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"
#  
#           # Move the built binary where you want it
#           mkdir bin
#           mv "${BIN_OUTPUT}" "./bin/${BIN_RELEASE}"
